-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dct_dct_Pipeline_WR_Loop_Row is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln87 : IN STD_LOGIC_VECTOR (57 downto 0);
    buf_2d_out_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    buf_2d_out_ce0 : OUT STD_LOGIC;
    buf_2d_out_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_2d_out_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    buf_2d_out_ce1 : OUT STD_LOGIC;
    buf_2d_out_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_2d_out_address2 : OUT STD_LOGIC_VECTOR (5 downto 0);
    buf_2d_out_ce2 : OUT STD_LOGIC;
    buf_2d_out_q2 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_2d_out_address3 : OUT STD_LOGIC_VECTOR (5 downto 0);
    buf_2d_out_ce3 : OUT STD_LOGIC;
    buf_2d_out_q3 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_2d_out_address4 : OUT STD_LOGIC_VECTOR (5 downto 0);
    buf_2d_out_ce4 : OUT STD_LOGIC;
    buf_2d_out_q4 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_2d_out_address5 : OUT STD_LOGIC_VECTOR (5 downto 0);
    buf_2d_out_ce5 : OUT STD_LOGIC;
    buf_2d_out_q5 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_2d_out_address6 : OUT STD_LOGIC_VECTOR (5 downto 0);
    buf_2d_out_ce6 : OUT STD_LOGIC;
    buf_2d_out_q6 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_2d_out_address7 : OUT STD_LOGIC_VECTOR (5 downto 0);
    buf_2d_out_ce7 : OUT STD_LOGIC;
    buf_2d_out_q7 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of dct_dct_Pipeline_WR_Loop_Row is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv384_lc_1 : STD_LOGIC_VECTOR (383 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_lv6_6 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_const_lv6_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal icmp_ln87_1_reg_469 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_1_reg_469_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln87_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln87_reg_425 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_1_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal buf_2d_out_load_reg_479 : STD_LOGIC_VECTOR (15 downto 0);
    signal buf_2d_out_load_1_reg_485 : STD_LOGIC_VECTOR (15 downto 0);
    signal buf_2d_out_load_2_reg_491 : STD_LOGIC_VECTOR (15 downto 0);
    signal buf_2d_out_load_3_reg_497 : STD_LOGIC_VECTOR (15 downto 0);
    signal buf_2d_out_load_4_reg_503 : STD_LOGIC_VECTOR (15 downto 0);
    signal buf_2d_out_load_5_reg_509 : STD_LOGIC_VECTOR (15 downto 0);
    signal buf_2d_out_load_6_reg_515 : STD_LOGIC_VECTOR (15 downto 0);
    signal buf_2d_out_load_7_reg_521 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal zext_ln90_fu_246_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln90_1_fu_257_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln90_2_fu_268_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln90_3_fu_279_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln90_4_fu_290_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln90_5_fu_301_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln90_6_fu_312_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln90_7_fu_323_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal phi_ln87_fu_86 : STD_LOGIC_VECTOR (383 downto 0);
    signal select_ln87_fu_393_p3 : STD_LOGIC_VECTOR (383 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal r_fu_90 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln87_fu_232_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_r_1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_fu_222_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_238_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln90_fu_251_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln90_1_fu_262_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln90_2_fu_273_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln90_3_fu_284_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln90_4_fu_295_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln90_5_fu_306_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln90_6_fu_317_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_28_fu_328_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_369_p4 : STD_LOGIC_VECTOR (255 downto 0);
    signal tmp_3_fu_379_p10 : STD_LOGIC_VECTOR (383 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component dct_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component dct_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    phi_ln87_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    phi_ln87_fu_86 <= ap_const_lv384_lc_1;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    phi_ln87_fu_86 <= select_ln87_fu_393_p3;
                end if;
            end if; 
        end if;
    end process;

    r_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln87_fu_226_p2 = ap_const_lv1_0))) then 
                    r_fu_90 <= add_ln87_fu_232_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    r_fu_90 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                icmp_ln87_1_reg_469_pp0_iter1_reg <= icmp_ln87_1_reg_469;
                icmp_ln87_reg_425 <= icmp_ln87_fu_226_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln87_reg_425 = ap_const_lv1_0))) then
                buf_2d_out_load_1_reg_485 <= buf_2d_out_q6;
                buf_2d_out_load_2_reg_491 <= buf_2d_out_q5;
                buf_2d_out_load_3_reg_497 <= buf_2d_out_q4;
                buf_2d_out_load_4_reg_503 <= buf_2d_out_q3;
                buf_2d_out_load_5_reg_509 <= buf_2d_out_q2;
                buf_2d_out_load_6_reg_515 <= buf_2d_out_q1;
                buf_2d_out_load_7_reg_521 <= buf_2d_out_q0;
                buf_2d_out_load_reg_479 <= buf_2d_out_q7;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln87_fu_226_p2 = ap_const_lv1_0))) then
                icmp_ln87_1_reg_469 <= icmp_ln87_1_fu_332_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln87_fu_232_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_r_1) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(m_axi_gmem_WREADY, icmp_ln87_1_reg_469_pp0_iter1_reg)
    begin
                ap_block_state3_io <= ((icmp_ln87_1_reg_469_pp0_iter1_reg = ap_const_lv1_1) and (m_axi_gmem_WREADY = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln87_fu_226_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln87_fu_226_p2 = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln87_reg_425)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln87_reg_425 = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_r_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, r_fu_90)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_r_1 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_r_1 <= r_fu_90;
        end if; 
    end process;

    buf_2d_out_address0 <= zext_ln90_7_fu_323_p1(6 - 1 downto 0);
    buf_2d_out_address1 <= zext_ln90_6_fu_312_p1(6 - 1 downto 0);
    buf_2d_out_address2 <= zext_ln90_5_fu_301_p1(6 - 1 downto 0);
    buf_2d_out_address3 <= zext_ln90_4_fu_290_p1(6 - 1 downto 0);
    buf_2d_out_address4 <= zext_ln90_3_fu_279_p1(6 - 1 downto 0);
    buf_2d_out_address5 <= zext_ln90_2_fu_268_p1(6 - 1 downto 0);
    buf_2d_out_address6 <= zext_ln90_1_fu_257_p1(6 - 1 downto 0);
    buf_2d_out_address7 <= zext_ln90_fu_246_p1(6 - 1 downto 0);

    buf_2d_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_2d_out_ce0 <= ap_const_logic_1;
        else 
            buf_2d_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_2d_out_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_2d_out_ce1 <= ap_const_logic_1;
        else 
            buf_2d_out_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_2d_out_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_2d_out_ce2 <= ap_const_logic_1;
        else 
            buf_2d_out_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    buf_2d_out_ce3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_2d_out_ce3 <= ap_const_logic_1;
        else 
            buf_2d_out_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    buf_2d_out_ce4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_2d_out_ce4 <= ap_const_logic_1;
        else 
            buf_2d_out_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    buf_2d_out_ce5_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_2d_out_ce5 <= ap_const_logic_1;
        else 
            buf_2d_out_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    buf_2d_out_ce6_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_2d_out_ce6 <= ap_const_logic_1;
        else 
            buf_2d_out_ce6 <= ap_const_logic_0;
        end if; 
    end process;


    buf_2d_out_ce7_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_2d_out_ce7 <= ap_const_logic_1;
        else 
            buf_2d_out_ce7 <= ap_const_logic_0;
        end if; 
    end process;

    empty_28_fu_328_p1 <= ap_sig_allocacmp_r_1(2 - 1 downto 0);
    empty_fu_222_p1 <= ap_sig_allocacmp_r_1(3 - 1 downto 0);

    gmem_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_gmem_WREADY, icmp_ln87_1_reg_469_pp0_iter1_reg, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln87_1_reg_469_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln87_1_fu_332_p2 <= "1" when (empty_28_fu_328_p1 = ap_const_lv2_3) else "0";
    icmp_ln87_fu_226_p2 <= "1" when (ap_sig_allocacmp_r_1 = ap_const_lv4_8) else "0";
    m_axi_gmem_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv32_0;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_ARVALID <= ap_const_logic_0;
    m_axi_gmem_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_AWVALID <= ap_const_logic_0;
    m_axi_gmem_BREADY <= ap_const_logic_0;
    m_axi_gmem_RREADY <= ap_const_logic_0;
    m_axi_gmem_WDATA <= ((((((((buf_2d_out_load_7_reg_521 & buf_2d_out_load_6_reg_515) & buf_2d_out_load_5_reg_509) & buf_2d_out_load_4_reg_503) & buf_2d_out_load_3_reg_497) & buf_2d_out_load_2_reg_491) & buf_2d_out_load_1_reg_485) & buf_2d_out_load_reg_479) & phi_ln87_fu_86);
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv64_FFFFFFFFFFFFFFFF;
    m_axi_gmem_WUSER <= ap_const_lv1_0;

    m_axi_gmem_WVALID_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln87_1_reg_469_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln87_1_reg_469_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            m_axi_gmem_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    or_ln90_1_fu_262_p2 <= (tmp_s_fu_238_p3 or ap_const_lv6_2);
    or_ln90_2_fu_273_p2 <= (tmp_s_fu_238_p3 or ap_const_lv6_3);
    or_ln90_3_fu_284_p2 <= (tmp_s_fu_238_p3 or ap_const_lv6_4);
    or_ln90_4_fu_295_p2 <= (tmp_s_fu_238_p3 or ap_const_lv6_5);
    or_ln90_5_fu_306_p2 <= (tmp_s_fu_238_p3 or ap_const_lv6_6);
    or_ln90_6_fu_317_p2 <= (tmp_s_fu_238_p3 or ap_const_lv6_7);
    or_ln90_fu_251_p2 <= (tmp_s_fu_238_p3 or ap_const_lv6_1);
    select_ln87_fu_393_p3 <= 
        ap_const_lv384_lc_1 when (icmp_ln87_1_reg_469_pp0_iter1_reg(0) = '1') else 
        tmp_3_fu_379_p10;
    tmp_2_fu_369_p4 <= phi_ln87_fu_86(383 downto 128);
    tmp_3_fu_379_p10 <= ((((((((buf_2d_out_load_7_reg_521 & buf_2d_out_load_6_reg_515) & buf_2d_out_load_5_reg_509) & buf_2d_out_load_4_reg_503) & buf_2d_out_load_3_reg_497) & buf_2d_out_load_2_reg_491) & buf_2d_out_load_1_reg_485) & buf_2d_out_load_reg_479) & tmp_2_fu_369_p4);
    tmp_s_fu_238_p3 <= (empty_fu_222_p1 & ap_const_lv3_0);
    zext_ln90_1_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln90_fu_251_p2),64));
    zext_ln90_2_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln90_1_fu_262_p2),64));
    zext_ln90_3_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln90_2_fu_273_p2),64));
    zext_ln90_4_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln90_3_fu_284_p2),64));
    zext_ln90_5_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln90_4_fu_295_p2),64));
    zext_ln90_6_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln90_5_fu_306_p2),64));
    zext_ln90_7_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln90_6_fu_317_p2),64));
    zext_ln90_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_238_p3),64));
end behav;
