-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dct_dct_Pipeline_Row_DCT_Loop_DCT_Outer_Loop is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    buf_2d_in_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    buf_2d_in_0_ce0 : OUT STD_LOGIC;
    buf_2d_in_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_2d_in_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    buf_2d_in_1_ce0 : OUT STD_LOGIC;
    buf_2d_in_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_2d_in_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    buf_2d_in_2_ce0 : OUT STD_LOGIC;
    buf_2d_in_2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_2d_in_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    buf_2d_in_3_ce0 : OUT STD_LOGIC;
    buf_2d_in_3_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_2d_in_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    buf_2d_in_4_ce0 : OUT STD_LOGIC;
    buf_2d_in_4_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_2d_in_5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    buf_2d_in_5_ce0 : OUT STD_LOGIC;
    buf_2d_in_5_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_2d_in_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    buf_2d_in_6_ce0 : OUT STD_LOGIC;
    buf_2d_in_6_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_2d_in_7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    buf_2d_in_7_ce0 : OUT STD_LOGIC;
    buf_2d_in_7_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    row_outbuf_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    row_outbuf_ce0 : OUT STD_LOGIC;
    row_outbuf_we0 : OUT STD_LOGIC;
    row_outbuf_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    dct_coeff_table_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dct_coeff_table_0_ce0 : OUT STD_LOGIC;
    dct_coeff_table_0_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    dct_coeff_table_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dct_coeff_table_1_ce0 : OUT STD_LOGIC;
    dct_coeff_table_1_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    dct_coeff_table_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dct_coeff_table_2_ce0 : OUT STD_LOGIC;
    dct_coeff_table_2_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    dct_coeff_table_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dct_coeff_table_3_ce0 : OUT STD_LOGIC;
    dct_coeff_table_3_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    dct_coeff_table_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dct_coeff_table_4_ce0 : OUT STD_LOGIC;
    dct_coeff_table_4_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    dct_coeff_table_5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dct_coeff_table_5_ce0 : OUT STD_LOGIC;
    dct_coeff_table_5_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    dct_coeff_table_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dct_coeff_table_6_ce0 : OUT STD_LOGIC;
    dct_coeff_table_6_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    dct_coeff_table_7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dct_coeff_table_7_ce0 : OUT STD_LOGIC;
    dct_coeff_table_7_q0 : IN STD_LOGIC_VECTOR (14 downto 0) );
end;


architecture behav of dct_dct_Pipeline_Row_DCT_Loop_DCT_Outer_Loop is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv29_1000 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln47_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln47_fu_389_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln47_reg_616 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln34_1_fu_413_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln34_1_reg_644 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln34_1_reg_644_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln34_1_reg_644_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln34_1_reg_644_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln34_1_reg_644_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal dct_coeff_table_0_load_reg_729 : STD_LOGIC_VECTOR (13 downto 0);
    signal dct_coeff_table_3_load_reg_744 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_5_load_reg_754 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_6_load_reg_759 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_529_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_535_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_541_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_547_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal k_cast_fu_397_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_1_fu_500_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_fu_80 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln28_fu_419_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_k_load : STD_LOGIC_VECTOR (3 downto 0);
    signal i_fu_84 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln47_1_fu_369_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_fu_88 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln47_1_fu_337_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln28_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln47_fu_349_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln34_fu_377_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln47_fu_361_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_381_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln34_fu_409_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_564_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_555_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln34_8_fu_508_p0 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_582_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_573_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln34_8_fu_508_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln34_8_fu_508_p2 : signal is "no";
    signal add_ln34_4_fu_504_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of add_ln34_4_fu_504_p2 : signal is "no";
    signal add_ln34_fu_512_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_547_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_555_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_555_p10 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component dct_mul_mul_16s_15s_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_16s_15s_13ns_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_16s_14ns_29s_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_16s_15s_29s_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_16s_15s_29ns_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_mul_16s_15s_29_4_1_U11 : component dct_mul_mul_16s_15s_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => buf_2d_in_1_q0,
        din1 => dct_coeff_table_1_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_529_p2);

    mul_mul_16s_15s_29_4_1_U12 : component dct_mul_mul_16s_15s_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => buf_2d_in_2_q0,
        din1 => dct_coeff_table_2_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_535_p2);

    mul_mul_16s_15s_29_4_1_U13 : component dct_mul_mul_16s_15s_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => buf_2d_in_4_q0,
        din1 => dct_coeff_table_4_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_541_p2);

    mac_muladd_16s_15s_13ns_29_4_1_U14 : component dct_mac_muladd_16s_15s_13ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        din2_WIDTH => 13,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => buf_2d_in_7_q0,
        din1 => dct_coeff_table_7_q0,
        din2 => grp_fu_547_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_547_p3);

    mac_muladd_16s_14ns_29s_29_4_1_U15 : component dct_mac_muladd_16s_14ns_29s_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => buf_2d_in_0_q0,
        din1 => grp_fu_555_p1,
        din2 => grp_fu_529_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_555_p3);

    mac_muladd_16s_15s_29s_29_4_1_U16 : component dct_mac_muladd_16s_15s_29s_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => buf_2d_in_3_q0,
        din1 => dct_coeff_table_3_load_reg_744,
        din2 => grp_fu_535_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_564_p3);

    mac_muladd_16s_15s_29s_29_4_1_U17 : component dct_mac_muladd_16s_15s_29s_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => buf_2d_in_5_q0,
        din1 => dct_coeff_table_5_load_reg_754,
        din2 => grp_fu_541_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_573_p3);

    mac_muladd_16s_15s_29ns_29_4_1_U18 : component dct_mac_muladd_16s_15s_29ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => buf_2d_in_6_q0,
        din1 => dct_coeff_table_6_load_reg_759,
        din2 => grp_fu_547_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_582_p3);

    flow_control_loop_pipe_sequential_init_U : component dct_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    i_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln47_fu_331_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_84 <= select_ln47_1_fu_369_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_84 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln47_fu_331_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_88 <= add_ln47_1_fu_337_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_88 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    k_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln47_fu_331_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    k_fu_80 <= add_ln28_fu_419_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    k_fu_80 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln47_fu_331_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln34_1_reg_644 <= add_ln34_1_fu_413_p2;
                    zext_ln47_reg_616(3 downto 0) <= zext_ln47_fu_389_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln34_1_reg_644_pp0_iter1_reg <= add_ln34_1_reg_644;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                dct_coeff_table_0_load_reg_729 <= dct_coeff_table_0_q0;
                dct_coeff_table_3_load_reg_744 <= dct_coeff_table_3_q0;
                dct_coeff_table_5_load_reg_754 <= dct_coeff_table_5_q0;
                dct_coeff_table_6_load_reg_759 <= dct_coeff_table_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln34_1_reg_644_pp0_iter2_reg <= add_ln34_1_reg_644_pp0_iter1_reg;
                add_ln34_1_reg_644_pp0_iter3_reg <= add_ln34_1_reg_644_pp0_iter2_reg;
                add_ln34_1_reg_644_pp0_iter4_reg <= add_ln34_1_reg_644_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if;
        end if;
    end process;
    zext_ln47_reg_616(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln28_fu_419_p2 <= std_logic_vector(unsigned(select_ln47_fu_361_p3) + unsigned(ap_const_lv4_1));
    add_ln34_1_fu_413_p2 <= std_logic_vector(unsigned(tmp_fu_381_p3) + unsigned(zext_ln34_fu_409_p1));
    add_ln34_4_fu_504_p2 <= std_logic_vector(signed(grp_fu_564_p3) + signed(grp_fu_555_p3));
    add_ln34_8_fu_508_p0 <= grp_fu_582_p3;
    add_ln34_8_fu_508_p2 <= std_logic_vector(signed(add_ln34_8_fu_508_p0) + signed(grp_fu_573_p3));
    add_ln34_fu_512_p2 <= std_logic_vector(unsigned(add_ln34_8_fu_508_p2) + unsigned(add_ln34_4_fu_504_p2));
    add_ln47_1_fu_337_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv7_1));
    add_ln47_fu_349_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln47_fu_331_p2)
    begin
        if (((icmp_ln47_fu_331_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_84)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_84;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_88)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_88;
        end if; 
    end process;


    ap_sig_allocacmp_k_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, k_fu_80, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_k_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_k_load <= k_fu_80;
        end if; 
    end process;

    buf_2d_in_0_address0 <= zext_ln47_reg_616(3 - 1 downto 0);

    buf_2d_in_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_2d_in_0_ce0 <= ap_const_logic_1;
        else 
            buf_2d_in_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_2d_in_1_address0 <= zext_ln47_fu_389_p1(3 - 1 downto 0);

    buf_2d_in_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_2d_in_1_ce0 <= ap_const_logic_1;
        else 
            buf_2d_in_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_2d_in_2_address0 <= zext_ln47_fu_389_p1(3 - 1 downto 0);

    buf_2d_in_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_2d_in_2_ce0 <= ap_const_logic_1;
        else 
            buf_2d_in_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_2d_in_3_address0 <= zext_ln47_reg_616(3 - 1 downto 0);

    buf_2d_in_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_2d_in_3_ce0 <= ap_const_logic_1;
        else 
            buf_2d_in_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_2d_in_4_address0 <= zext_ln47_fu_389_p1(3 - 1 downto 0);

    buf_2d_in_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_2d_in_4_ce0 <= ap_const_logic_1;
        else 
            buf_2d_in_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_2d_in_5_address0 <= zext_ln47_reg_616(3 - 1 downto 0);

    buf_2d_in_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_2d_in_5_ce0 <= ap_const_logic_1;
        else 
            buf_2d_in_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_2d_in_6_address0 <= zext_ln47_reg_616(3 - 1 downto 0);

    buf_2d_in_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_2d_in_6_ce0 <= ap_const_logic_1;
        else 
            buf_2d_in_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_2d_in_7_address0 <= zext_ln47_fu_389_p1(3 - 1 downto 0);

    buf_2d_in_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_2d_in_7_ce0 <= ap_const_logic_1;
        else 
            buf_2d_in_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_0_address0 <= k_cast_fu_397_p1(3 - 1 downto 0);

    dct_coeff_table_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dct_coeff_table_0_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_1_address0 <= k_cast_fu_397_p1(3 - 1 downto 0);

    dct_coeff_table_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dct_coeff_table_1_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_2_address0 <= k_cast_fu_397_p1(3 - 1 downto 0);

    dct_coeff_table_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dct_coeff_table_2_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_3_address0 <= k_cast_fu_397_p1(3 - 1 downto 0);

    dct_coeff_table_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dct_coeff_table_3_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_4_address0 <= k_cast_fu_397_p1(3 - 1 downto 0);

    dct_coeff_table_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dct_coeff_table_4_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_5_address0 <= k_cast_fu_397_p1(3 - 1 downto 0);

    dct_coeff_table_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dct_coeff_table_5_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_6_address0 <= k_cast_fu_397_p1(3 - 1 downto 0);

    dct_coeff_table_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dct_coeff_table_6_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_7_address0 <= k_cast_fu_397_p1(3 - 1 downto 0);

    dct_coeff_table_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dct_coeff_table_7_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_547_p2 <= ap_const_lv29_1000(13 - 1 downto 0);
    grp_fu_555_p1 <= grp_fu_555_p10(14 - 1 downto 0);
    grp_fu_555_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dct_coeff_table_0_load_reg_729),29));
    icmp_ln28_fu_355_p2 <= "1" when (ap_sig_allocacmp_k_load = ap_const_lv4_8) else "0";
    icmp_ln47_fu_331_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv7_40) else "0";
    k_cast_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln47_fu_361_p3),64));
    row_outbuf_address0 <= zext_ln34_1_fu_500_p1(6 - 1 downto 0);

    row_outbuf_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            row_outbuf_ce0 <= ap_const_logic_1;
        else 
            row_outbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    row_outbuf_d0 <= add_ln34_fu_512_p2(28 downto 13);

    row_outbuf_we0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            row_outbuf_we0 <= ap_const_logic_1;
        else 
            row_outbuf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln47_1_fu_369_p3 <= 
        add_ln47_fu_349_p2 when (icmp_ln28_fu_355_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
    select_ln47_fu_361_p3 <= 
        ap_const_lv4_0 when (icmp_ln28_fu_355_p2(0) = '1') else 
        ap_sig_allocacmp_k_load;
    tmp_fu_381_p3 <= (trunc_ln34_fu_377_p1 & ap_const_lv3_0);
    trunc_ln34_fu_377_p1 <= select_ln47_1_fu_369_p3(3 - 1 downto 0);
    zext_ln34_1_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_1_reg_644_pp0_iter4_reg),64));
    zext_ln34_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln47_fu_361_p3),6));
    zext_ln47_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln47_1_fu_369_p3),64));
end behav;
