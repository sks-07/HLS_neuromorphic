-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dct_dct_Pipeline_Col_DCT_Loop_DCT_Outer_Loop is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    col_inbuf_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    col_inbuf_ce0 : OUT STD_LOGIC;
    col_inbuf_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    col_inbuf_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    col_inbuf_ce1 : OUT STD_LOGIC;
    col_inbuf_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    col_inbuf_address2 : OUT STD_LOGIC_VECTOR (5 downto 0);
    col_inbuf_ce2 : OUT STD_LOGIC;
    col_inbuf_q2 : IN STD_LOGIC_VECTOR (15 downto 0);
    col_inbuf_address3 : OUT STD_LOGIC_VECTOR (5 downto 0);
    col_inbuf_ce3 : OUT STD_LOGIC;
    col_inbuf_q3 : IN STD_LOGIC_VECTOR (15 downto 0);
    col_inbuf_address4 : OUT STD_LOGIC_VECTOR (5 downto 0);
    col_inbuf_ce4 : OUT STD_LOGIC;
    col_inbuf_q4 : IN STD_LOGIC_VECTOR (15 downto 0);
    col_inbuf_address5 : OUT STD_LOGIC_VECTOR (5 downto 0);
    col_inbuf_ce5 : OUT STD_LOGIC;
    col_inbuf_q5 : IN STD_LOGIC_VECTOR (15 downto 0);
    col_inbuf_address6 : OUT STD_LOGIC_VECTOR (5 downto 0);
    col_inbuf_ce6 : OUT STD_LOGIC;
    col_inbuf_q6 : IN STD_LOGIC_VECTOR (15 downto 0);
    col_inbuf_address7 : OUT STD_LOGIC_VECTOR (5 downto 0);
    col_inbuf_ce7 : OUT STD_LOGIC;
    col_inbuf_q7 : IN STD_LOGIC_VECTOR (15 downto 0);
    col_outbuf_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    col_outbuf_ce0 : OUT STD_LOGIC;
    col_outbuf_we0 : OUT STD_LOGIC;
    col_outbuf_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    dct_coeff_table_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dct_coeff_table_0_ce0 : OUT STD_LOGIC;
    dct_coeff_table_0_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    dct_coeff_table_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dct_coeff_table_1_ce0 : OUT STD_LOGIC;
    dct_coeff_table_1_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    dct_coeff_table_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dct_coeff_table_2_ce0 : OUT STD_LOGIC;
    dct_coeff_table_2_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    dct_coeff_table_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dct_coeff_table_3_ce0 : OUT STD_LOGIC;
    dct_coeff_table_3_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    dct_coeff_table_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dct_coeff_table_4_ce0 : OUT STD_LOGIC;
    dct_coeff_table_4_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    dct_coeff_table_5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dct_coeff_table_5_ce0 : OUT STD_LOGIC;
    dct_coeff_table_5_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    dct_coeff_table_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dct_coeff_table_6_ce0 : OUT STD_LOGIC;
    dct_coeff_table_6_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    dct_coeff_table_7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dct_coeff_table_7_ce0 : OUT STD_LOGIC;
    dct_coeff_table_7_q0 : IN STD_LOGIC_VECTOR (14 downto 0) );
end;


architecture behav of dct_dct_Pipeline_Col_DCT_Loop_DCT_Outer_Loop is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_lv6_6 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_const_lv6_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv29_1000 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln58_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln34_fu_568_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln34_reg_807 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln34_reg_807_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln34_reg_807_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln34_reg_807_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln34_reg_807_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal col_inbuf_load_reg_852 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_inbuf_load_3_reg_867 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_inbuf_load_5_reg_877 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_inbuf_load_6_reg_882 : STD_LOGIC_VECTOR (15 downto 0);
    signal dct_coeff_table_0_load_reg_892 : STD_LOGIC_VECTOR (13 downto 0);
    signal dct_coeff_table_3_load_reg_907 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_5_load_reg_917 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_6_load_reg_922 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_680_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_686_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_692_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_698_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln58_fu_414_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln32_fu_433_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_1_fu_452_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_2_fu_471_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_3_fu_490_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_4_fu_509_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_5_fu_528_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_6_fu_547_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_1_cast_fu_552_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_2_fu_651_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_fu_80 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln28_fu_574_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_k_load : STD_LOGIC_VECTOR (3 downto 0);
    signal i_fu_84 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln58_1_fu_386_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten29_fu_88 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln58_1_fu_345_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_indvar_flatten29_load : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln32_fu_327_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln58_fu_354_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln28_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln43_fu_360_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln34_fu_394_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_11_cast_fu_378_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_cast_fu_331_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln58_2_fu_406_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln58_10_fu_419_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln58_fu_427_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln58_11_fu_438_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln58_1_fu_446_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln58_12_fu_457_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln58_2_fu_465_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln58_13_fu_476_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln58_3_fu_484_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln58_14_fu_495_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln58_4_fu_503_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln58_15_fu_514_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln58_5_fu_522_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln58_16_fu_533_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln58_6_fu_541_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln58_fu_370_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_398_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln34_fu_564_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_715_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_706_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln34_15_fu_659_p0 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_733_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_724_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln34_15_fu_659_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln34_15_fu_659_p2 : signal is "no";
    signal add_ln34_11_fu_655_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of add_ln34_11_fu_655_p2 : signal is "no";
    signal add_ln34_1_fu_663_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_698_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_706_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_706_p10 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component dct_mul_mul_16s_15s_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_16s_15s_13ns_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_16s_14ns_29s_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_16s_15s_29s_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_16s_15s_29ns_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_mul_16s_15s_29_4_1_U43 : component dct_mul_mul_16s_15s_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => col_inbuf_q6,
        din1 => dct_coeff_table_1_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_680_p2);

    mul_mul_16s_15s_29_4_1_U44 : component dct_mul_mul_16s_15s_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => col_inbuf_q5,
        din1 => dct_coeff_table_2_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_686_p2);

    mul_mul_16s_15s_29_4_1_U45 : component dct_mul_mul_16s_15s_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => col_inbuf_q3,
        din1 => dct_coeff_table_4_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_692_p2);

    mac_muladd_16s_15s_13ns_29_4_1_U46 : component dct_mac_muladd_16s_15s_13ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        din2_WIDTH => 13,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => col_inbuf_q0,
        din1 => dct_coeff_table_7_q0,
        din2 => grp_fu_698_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_698_p3);

    mac_muladd_16s_14ns_29s_29_4_1_U47 : component dct_mac_muladd_16s_14ns_29s_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => col_inbuf_load_reg_852,
        din1 => grp_fu_706_p1,
        din2 => grp_fu_680_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_706_p3);

    mac_muladd_16s_15s_29s_29_4_1_U48 : component dct_mac_muladd_16s_15s_29s_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => col_inbuf_load_3_reg_867,
        din1 => dct_coeff_table_3_load_reg_907,
        din2 => grp_fu_686_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_715_p3);

    mac_muladd_16s_15s_29s_29_4_1_U49 : component dct_mac_muladd_16s_15s_29s_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => col_inbuf_load_5_reg_877,
        din1 => dct_coeff_table_5_load_reg_917,
        din2 => grp_fu_692_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_724_p3);

    mac_muladd_16s_15s_29ns_29_4_1_U50 : component dct_mac_muladd_16s_15s_29ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => col_inbuf_load_6_reg_882,
        din1 => dct_coeff_table_6_load_reg_922,
        din2 => grp_fu_698_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_733_p3);

    flow_control_loop_pipe_sequential_init_U : component dct_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    i_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln58_fu_339_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_84 <= select_ln58_1_fu_386_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_84 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten29_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln58_fu_339_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten29_fu_88 <= add_ln58_1_fu_345_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten29_fu_88 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    k_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln58_fu_339_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    k_fu_80 <= add_ln28_fu_574_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    k_fu_80 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln58_fu_339_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln34_reg_807 <= add_ln34_fu_568_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln34_reg_807_pp0_iter1_reg <= add_ln34_reg_807;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                dct_coeff_table_0_load_reg_892 <= dct_coeff_table_0_q0;
                dct_coeff_table_3_load_reg_907 <= dct_coeff_table_3_q0;
                dct_coeff_table_5_load_reg_917 <= dct_coeff_table_5_q0;
                dct_coeff_table_6_load_reg_922 <= dct_coeff_table_6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln34_reg_807_pp0_iter2_reg <= add_ln34_reg_807_pp0_iter1_reg;
                add_ln34_reg_807_pp0_iter3_reg <= add_ln34_reg_807_pp0_iter2_reg;
                add_ln34_reg_807_pp0_iter4_reg <= add_ln34_reg_807_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                col_inbuf_load_3_reg_867 <= col_inbuf_q4;
                col_inbuf_load_5_reg_877 <= col_inbuf_q2;
                col_inbuf_load_6_reg_882 <= col_inbuf_q1;
                col_inbuf_load_reg_852 <= col_inbuf_q7;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln28_fu_574_p2 <= std_logic_vector(unsigned(select_ln58_fu_370_p3) + unsigned(ap_const_lv4_1));
    add_ln34_11_fu_655_p2 <= std_logic_vector(signed(grp_fu_715_p3) + signed(grp_fu_706_p3));
    add_ln34_15_fu_659_p0 <= grp_fu_733_p3;
    add_ln34_15_fu_659_p2 <= std_logic_vector(signed(add_ln34_15_fu_659_p0) + signed(grp_fu_724_p3));
    add_ln34_1_fu_663_p2 <= std_logic_vector(unsigned(add_ln34_15_fu_659_p2) + unsigned(add_ln34_11_fu_655_p2));
    add_ln34_fu_568_p2 <= std_logic_vector(unsigned(tmp_s_fu_398_p3) + unsigned(zext_ln34_fu_564_p1));
    add_ln58_1_fu_345_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten29_load) + unsigned(ap_const_lv7_1));
    add_ln58_fu_354_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln58_fu_339_p2)
    begin
        if (((icmp_ln58_fu_339_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_84)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_84;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten29_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten29_fu_88)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten29_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_indvar_flatten29_load <= indvar_flatten29_fu_88;
        end if; 
    end process;


    ap_sig_allocacmp_k_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, k_fu_80, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_k_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_k_load <= k_fu_80;
        end if; 
    end process;

    col_inbuf_address0 <= zext_ln32_6_fu_547_p1(6 - 1 downto 0);
    col_inbuf_address1 <= zext_ln32_5_fu_528_p1(6 - 1 downto 0);
    col_inbuf_address2 <= zext_ln32_4_fu_509_p1(6 - 1 downto 0);
    col_inbuf_address3 <= zext_ln32_3_fu_490_p1(6 - 1 downto 0);
    col_inbuf_address4 <= zext_ln32_2_fu_471_p1(6 - 1 downto 0);
    col_inbuf_address5 <= zext_ln32_1_fu_452_p1(6 - 1 downto 0);
    col_inbuf_address6 <= zext_ln32_fu_433_p1(6 - 1 downto 0);
    col_inbuf_address7 <= zext_ln58_fu_414_p1(6 - 1 downto 0);

    col_inbuf_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            col_inbuf_ce0 <= ap_const_logic_1;
        else 
            col_inbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    col_inbuf_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            col_inbuf_ce1 <= ap_const_logic_1;
        else 
            col_inbuf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    col_inbuf_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            col_inbuf_ce2 <= ap_const_logic_1;
        else 
            col_inbuf_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    col_inbuf_ce3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            col_inbuf_ce3 <= ap_const_logic_1;
        else 
            col_inbuf_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    col_inbuf_ce4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            col_inbuf_ce4 <= ap_const_logic_1;
        else 
            col_inbuf_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    col_inbuf_ce5_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            col_inbuf_ce5 <= ap_const_logic_1;
        else 
            col_inbuf_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    col_inbuf_ce6_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            col_inbuf_ce6 <= ap_const_logic_1;
        else 
            col_inbuf_ce6 <= ap_const_logic_0;
        end if; 
    end process;


    col_inbuf_ce7_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            col_inbuf_ce7 <= ap_const_logic_1;
        else 
            col_inbuf_ce7 <= ap_const_logic_0;
        end if; 
    end process;

    col_outbuf_address0 <= zext_ln34_2_fu_651_p1(6 - 1 downto 0);

    col_outbuf_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            col_outbuf_ce0 <= ap_const_logic_1;
        else 
            col_outbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_outbuf_d0 <= add_ln34_1_fu_663_p2(28 downto 13);

    col_outbuf_we0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            col_outbuf_we0 <= ap_const_logic_1;
        else 
            col_outbuf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_0_address0 <= k_1_cast_fu_552_p1(3 - 1 downto 0);

    dct_coeff_table_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dct_coeff_table_0_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_1_address0 <= k_1_cast_fu_552_p1(3 - 1 downto 0);

    dct_coeff_table_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dct_coeff_table_1_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_2_address0 <= k_1_cast_fu_552_p1(3 - 1 downto 0);

    dct_coeff_table_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dct_coeff_table_2_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_3_address0 <= k_1_cast_fu_552_p1(3 - 1 downto 0);

    dct_coeff_table_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dct_coeff_table_3_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_4_address0 <= k_1_cast_fu_552_p1(3 - 1 downto 0);

    dct_coeff_table_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dct_coeff_table_4_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_5_address0 <= k_1_cast_fu_552_p1(3 - 1 downto 0);

    dct_coeff_table_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dct_coeff_table_5_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_6_address0 <= k_1_cast_fu_552_p1(3 - 1 downto 0);

    dct_coeff_table_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dct_coeff_table_6_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_7_address0 <= k_1_cast_fu_552_p1(3 - 1 downto 0);

    dct_coeff_table_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dct_coeff_table_7_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_698_p2 <= ap_const_lv29_1000(13 - 1 downto 0);
    grp_fu_706_p1 <= grp_fu_706_p10(14 - 1 downto 0);
    grp_fu_706_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dct_coeff_table_0_load_reg_892),29));
    icmp_ln28_fu_364_p2 <= "1" when (ap_sig_allocacmp_k_load = ap_const_lv4_8) else "0";
    icmp_ln58_fu_339_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten29_load = ap_const_lv7_40) else "0";
    k_1_cast_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln58_fu_370_p3),64));
    or_ln58_1_fu_446_p2 <= (select_ln58_11_fu_438_p3 or ap_const_lv6_2);
    or_ln58_2_fu_465_p2 <= (select_ln58_12_fu_457_p3 or ap_const_lv6_3);
    or_ln58_3_fu_484_p2 <= (select_ln58_13_fu_476_p3 or ap_const_lv6_4);
    or_ln58_4_fu_503_p2 <= (select_ln58_14_fu_495_p3 or ap_const_lv6_5);
    or_ln58_5_fu_522_p2 <= (select_ln58_15_fu_514_p3 or ap_const_lv6_6);
    or_ln58_6_fu_541_p2 <= (select_ln58_16_fu_533_p3 or ap_const_lv6_7);
    or_ln58_fu_427_p2 <= (select_ln58_10_fu_419_p3 or ap_const_lv6_1);
    select_ln58_10_fu_419_p3 <= 
        tmp_11_cast_fu_378_p3 when (icmp_ln28_fu_364_p2(0) = '1') else 
        tmp_3_cast_fu_331_p3;
    select_ln58_11_fu_438_p3 <= 
        tmp_11_cast_fu_378_p3 when (icmp_ln28_fu_364_p2(0) = '1') else 
        tmp_3_cast_fu_331_p3;
    select_ln58_12_fu_457_p3 <= 
        tmp_11_cast_fu_378_p3 when (icmp_ln28_fu_364_p2(0) = '1') else 
        tmp_3_cast_fu_331_p3;
    select_ln58_13_fu_476_p3 <= 
        tmp_11_cast_fu_378_p3 when (icmp_ln28_fu_364_p2(0) = '1') else 
        tmp_3_cast_fu_331_p3;
    select_ln58_14_fu_495_p3 <= 
        tmp_11_cast_fu_378_p3 when (icmp_ln28_fu_364_p2(0) = '1') else 
        tmp_3_cast_fu_331_p3;
    select_ln58_15_fu_514_p3 <= 
        tmp_11_cast_fu_378_p3 when (icmp_ln28_fu_364_p2(0) = '1') else 
        tmp_3_cast_fu_331_p3;
    select_ln58_16_fu_533_p3 <= 
        tmp_11_cast_fu_378_p3 when (icmp_ln28_fu_364_p2(0) = '1') else 
        tmp_3_cast_fu_331_p3;
    select_ln58_1_fu_386_p3 <= 
        add_ln58_fu_354_p2 when (icmp_ln28_fu_364_p2(0) = '1') else 
        ap_sig_allocacmp_i_1;
    select_ln58_2_fu_406_p3 <= 
        tmp_11_cast_fu_378_p3 when (icmp_ln28_fu_364_p2(0) = '1') else 
        tmp_3_cast_fu_331_p3;
    select_ln58_fu_370_p3 <= 
        ap_const_lv4_0 when (icmp_ln28_fu_364_p2(0) = '1') else 
        ap_sig_allocacmp_k_load;
    tmp_11_cast_fu_378_p3 <= (trunc_ln43_fu_360_p1 & ap_const_lv3_0);
    tmp_3_cast_fu_331_p3 <= (trunc_ln32_fu_327_p1 & ap_const_lv3_0);
    tmp_s_fu_398_p3 <= (trunc_ln34_fu_394_p1 & ap_const_lv3_0);
    trunc_ln32_fu_327_p1 <= ap_sig_allocacmp_i_1(3 - 1 downto 0);
    trunc_ln34_fu_394_p1 <= select_ln58_1_fu_386_p3(3 - 1 downto 0);
    trunc_ln43_fu_360_p1 <= add_ln58_fu_354_p2(3 - 1 downto 0);
    zext_ln32_1_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln58_1_fu_446_p2),64));
    zext_ln32_2_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln58_2_fu_465_p2),64));
    zext_ln32_3_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln58_3_fu_484_p2),64));
    zext_ln32_4_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln58_4_fu_503_p2),64));
    zext_ln32_5_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln58_5_fu_522_p2),64));
    zext_ln32_6_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln58_6_fu_541_p2),64));
    zext_ln32_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln58_fu_427_p2),64));
    zext_ln34_2_fu_651_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_reg_807_pp0_iter4_reg),64));
    zext_ln34_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln58_fu_370_p3),6));
    zext_ln58_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln58_2_fu_406_p3),64));
end behav;
