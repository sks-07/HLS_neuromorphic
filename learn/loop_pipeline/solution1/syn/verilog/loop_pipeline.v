// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="loop_pipeline_loop_pipeline,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=94,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=2440,HLS_SYN_LUT=3828,HLS_VERSION=2022_2}" *)

module loop_pipeline (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 95'd1;
parameter    ap_ST_fsm_state2 = 95'd2;
parameter    ap_ST_fsm_state3 = 95'd4;
parameter    ap_ST_fsm_state4 = 95'd8;
parameter    ap_ST_fsm_state5 = 95'd16;
parameter    ap_ST_fsm_state6 = 95'd32;
parameter    ap_ST_fsm_state7 = 95'd64;
parameter    ap_ST_fsm_state8 = 95'd128;
parameter    ap_ST_fsm_state9 = 95'd256;
parameter    ap_ST_fsm_state10 = 95'd512;
parameter    ap_ST_fsm_state11 = 95'd1024;
parameter    ap_ST_fsm_state12 = 95'd2048;
parameter    ap_ST_fsm_state13 = 95'd4096;
parameter    ap_ST_fsm_state14 = 95'd8192;
parameter    ap_ST_fsm_state15 = 95'd16384;
parameter    ap_ST_fsm_state16 = 95'd32768;
parameter    ap_ST_fsm_state17 = 95'd65536;
parameter    ap_ST_fsm_state18 = 95'd131072;
parameter    ap_ST_fsm_state19 = 95'd262144;
parameter    ap_ST_fsm_state20 = 95'd524288;
parameter    ap_ST_fsm_state21 = 95'd1048576;
parameter    ap_ST_fsm_state22 = 95'd2097152;
parameter    ap_ST_fsm_state23 = 95'd4194304;
parameter    ap_ST_fsm_state24 = 95'd8388608;
parameter    ap_ST_fsm_state25 = 95'd16777216;
parameter    ap_ST_fsm_state26 = 95'd33554432;
parameter    ap_ST_fsm_state27 = 95'd67108864;
parameter    ap_ST_fsm_state28 = 95'd134217728;
parameter    ap_ST_fsm_state29 = 95'd268435456;
parameter    ap_ST_fsm_state30 = 95'd536870912;
parameter    ap_ST_fsm_state31 = 95'd1073741824;
parameter    ap_ST_fsm_state32 = 95'd2147483648;
parameter    ap_ST_fsm_state33 = 95'd4294967296;
parameter    ap_ST_fsm_state34 = 95'd8589934592;
parameter    ap_ST_fsm_state35 = 95'd17179869184;
parameter    ap_ST_fsm_state36 = 95'd34359738368;
parameter    ap_ST_fsm_state37 = 95'd68719476736;
parameter    ap_ST_fsm_state38 = 95'd137438953472;
parameter    ap_ST_fsm_state39 = 95'd274877906944;
parameter    ap_ST_fsm_state40 = 95'd549755813888;
parameter    ap_ST_fsm_state41 = 95'd1099511627776;
parameter    ap_ST_fsm_state42 = 95'd2199023255552;
parameter    ap_ST_fsm_state43 = 95'd4398046511104;
parameter    ap_ST_fsm_state44 = 95'd8796093022208;
parameter    ap_ST_fsm_state45 = 95'd17592186044416;
parameter    ap_ST_fsm_state46 = 95'd35184372088832;
parameter    ap_ST_fsm_state47 = 95'd70368744177664;
parameter    ap_ST_fsm_state48 = 95'd140737488355328;
parameter    ap_ST_fsm_state49 = 95'd281474976710656;
parameter    ap_ST_fsm_state50 = 95'd562949953421312;
parameter    ap_ST_fsm_state51 = 95'd1125899906842624;
parameter    ap_ST_fsm_state52 = 95'd2251799813685248;
parameter    ap_ST_fsm_state53 = 95'd4503599627370496;
parameter    ap_ST_fsm_state54 = 95'd9007199254740992;
parameter    ap_ST_fsm_state55 = 95'd18014398509481984;
parameter    ap_ST_fsm_state56 = 95'd36028797018963968;
parameter    ap_ST_fsm_state57 = 95'd72057594037927936;
parameter    ap_ST_fsm_state58 = 95'd144115188075855872;
parameter    ap_ST_fsm_state59 = 95'd288230376151711744;
parameter    ap_ST_fsm_state60 = 95'd576460752303423488;
parameter    ap_ST_fsm_state61 = 95'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 95'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 95'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 95'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 95'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 95'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 95'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 95'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 95'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 95'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 95'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 95'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 95'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 95'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 95'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 95'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 95'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 95'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 95'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 95'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 95'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 95'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 95'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 95'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 95'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 95'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 95'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 95'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 95'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 95'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 95'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 95'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 95'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 95'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 95'd19807040628566084398385987584;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

(* shreg_extract = "no" *) reg    ap_rst_reg_2;
(* shreg_extract = "no" *) reg    ap_rst_reg_1;
(* shreg_extract = "no" *) reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
wire    ap_continue;
reg    ap_done_reg;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [94:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] A;
reg  signed [19:0] acc_V;
reg   [19:0] ap_return;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state72;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state73;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state74;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state76;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state77;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state78;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state79;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state80;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state81;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state82;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state83;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state84;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state85;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state86;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state87;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state88;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state89;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state90;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state91;
reg   [63:0] A_read_reg_888;
reg   [63:0] gmem_addr_1_reg_918;
reg   [63:0] gmem_addr_2_reg_924;
reg   [63:0] gmem_addr_3_reg_930;
reg   [63:0] gmem_addr_4_reg_936;
reg   [63:0] gmem_addr_5_reg_942;
reg   [63:0] gmem_addr_6_reg_948;
reg   [63:0] gmem_addr_7_reg_954;
reg   [63:0] gmem_addr_8_reg_960;
reg   [63:0] gmem_addr_9_reg_966;
reg   [63:0] gmem_addr_10_reg_972;
reg   [63:0] gmem_addr_11_reg_978;
reg   [63:0] gmem_addr_12_reg_984;
reg   [63:0] gmem_addr_13_reg_990;
reg   [63:0] gmem_addr_14_reg_996;
reg   [63:0] gmem_addr_15_reg_1002;
reg   [63:0] gmem_addr_16_reg_1008;
reg   [63:0] gmem_addr_17_reg_1014;
reg   [63:0] gmem_addr_18_reg_1020;
reg   [63:0] gmem_addr_19_reg_1026;
wire   [4:0] empty_fu_555_p1;
reg   [4:0] empty_reg_1032;
wire   [4:0] empty_14_fu_559_p1;
reg   [4:0] empty_14_reg_1037;
wire   [4:0] empty_16_fu_563_p1;
reg   [4:0] empty_16_reg_1042;
wire   [5:0] tmp4_fu_573_p2;
reg   [5:0] tmp4_reg_1047;
wire   [4:0] empty_18_fu_579_p1;
reg   [4:0] empty_18_reg_1052;
wire   [4:0] empty_20_fu_583_p1;
reg   [4:0] empty_20_reg_1057;
wire   [4:0] empty_22_fu_587_p1;
reg   [4:0] empty_22_reg_1062;
wire   [7:0] tmp1_fu_623_p2;
reg   [7:0] tmp1_reg_1067;
wire   [4:0] empty_24_fu_629_p1;
reg   [4:0] empty_24_reg_1072;
wire   [4:0] empty_26_fu_633_p1;
reg   [4:0] empty_26_reg_1077;
wire   [5:0] tmp8_fu_643_p2;
reg   [5:0] tmp8_reg_1082;
wire   [4:0] empty_28_fu_649_p1;
reg   [4:0] empty_28_reg_1087;
wire   [4:0] empty_30_fu_653_p1;
reg   [4:0] empty_30_reg_1092;
wire   [4:0] empty_32_fu_657_p1;
reg   [4:0] empty_32_reg_1097;
wire   [8:0] tmp_fu_706_p2;
reg  signed [8:0] tmp_reg_1102;
wire   [4:0] empty_34_fu_712_p1;
reg   [4:0] empty_34_reg_1107;
wire   [4:0] empty_36_fu_716_p1;
reg   [4:0] empty_36_reg_1112;
wire   [5:0] tmp13_fu_726_p2;
reg   [5:0] tmp13_reg_1117;
wire   [4:0] empty_38_fu_732_p1;
reg   [4:0] empty_38_reg_1122;
wire   [4:0] empty_40_fu_736_p1;
reg   [4:0] empty_40_reg_1127;
wire   [4:0] empty_42_fu_740_p1;
reg   [4:0] empty_42_reg_1132;
wire   [7:0] tmp12_fu_776_p2;
reg   [7:0] tmp12_reg_1137;
wire   [4:0] empty_44_fu_782_p1;
reg   [4:0] empty_44_reg_1142;
wire   [4:0] empty_46_fu_786_p1;
reg   [4:0] empty_46_reg_1147;
wire   [5:0] tmp17_fu_796_p2;
reg   [5:0] tmp17_reg_1152;
wire   [4:0] empty_48_fu_802_p1;
reg   [4:0] empty_48_reg_1157;
wire   [4:0] empty_50_fu_806_p1;
reg   [4:0] empty_50_reg_1162;
wire    gmem_AWREADY;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [63:0] gmem_ARADDR;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [7:0] gmem_RDATA;
wire   [10:0] gmem_RFIFONUM;
wire    gmem_BVALID;
wire   [63:0] empty_13_fu_346_p2;
wire   [63:0] empty_15_fu_357_p2;
wire   [63:0] empty_17_fu_368_p2;
wire   [63:0] empty_19_fu_379_p2;
wire   [63:0] empty_21_fu_390_p2;
wire   [63:0] empty_23_fu_401_p2;
wire   [63:0] empty_25_fu_412_p2;
wire   [63:0] empty_27_fu_423_p2;
wire   [63:0] empty_29_fu_434_p2;
wire   [63:0] empty_31_fu_445_p2;
wire   [63:0] empty_33_fu_456_p2;
wire   [63:0] empty_35_fu_467_p2;
wire   [63:0] empty_37_fu_478_p2;
wire   [63:0] empty_39_fu_489_p2;
wire   [63:0] empty_41_fu_500_p2;
wire   [63:0] empty_43_fu_511_p2;
wire   [63:0] empty_45_fu_522_p2;
wire   [63:0] empty_47_fu_533_p2;
wire   [63:0] empty_49_fu_544_p2;
wire  signed [19:0] grp_fu_877_p4;
wire    ap_CS_fsm_state95;
wire    ap_CS_fsm_state94;
reg    ap_block_state1;
wire  signed [5:0] sext_ln24_1_fu_570_p1;
wire  signed [5:0] sext_ln24_fu_567_p1;
wire  signed [5:0] sext_ln24_3_fu_594_p1;
wire  signed [5:0] sext_ln24_4_fu_597_p1;
wire   [5:0] tmp6_fu_603_p2;
wire  signed [6:0] tmp6_cast_fu_609_p1;
wire  signed [6:0] sext_ln24_2_fu_591_p1;
wire   [6:0] tmp5_fu_613_p2;
wire  signed [7:0] tmp5_cast_fu_619_p1;
wire  signed [7:0] tmp4_cast_fu_600_p1;
wire  signed [5:0] sext_ln24_5_fu_637_p1;
wire  signed [5:0] sext_ln24_6_fu_640_p1;
wire  signed [5:0] sext_ln24_8_fu_664_p1;
wire  signed [5:0] sext_ln24_9_fu_667_p1;
wire   [5:0] tmp10_fu_676_p2;
wire  signed [6:0] tmp10_cast_fu_682_p1;
wire  signed [6:0] sext_ln24_7_fu_661_p1;
wire   [6:0] tmp9_fu_686_p2;
wire  signed [7:0] tmp9_cast_fu_692_p1;
wire  signed [7:0] tmp8_cast_fu_673_p1;
wire   [7:0] tmp7_fu_696_p2;
wire  signed [8:0] tmp7_cast_fu_702_p1;
wire  signed [8:0] tmp1_cast_fu_670_p1;
wire  signed [5:0] sext_ln24_10_fu_720_p1;
wire  signed [5:0] sext_ln24_11_fu_723_p1;
wire  signed [5:0] sext_ln24_13_fu_747_p1;
wire  signed [5:0] sext_ln24_14_fu_750_p1;
wire   [5:0] tmp15_fu_756_p2;
wire  signed [6:0] tmp15_cast_fu_762_p1;
wire  signed [6:0] sext_ln24_12_fu_744_p1;
wire   [6:0] tmp14_fu_766_p2;
wire  signed [7:0] tmp14_cast_fu_772_p1;
wire  signed [7:0] tmp13_cast_fu_753_p1;
wire  signed [5:0] sext_ln24_15_fu_790_p1;
wire  signed [5:0] sext_ln24_16_fu_793_p1;
wire    ap_CS_fsm_state92;
wire  signed [5:0] sext_ln24_18_fu_813_p1;
wire  signed [5:0] gmem_load_19_cast_cast_fu_816_p1;
wire   [5:0] tmp19_fu_828_p2;
wire  signed [6:0] tmp19_cast_fu_834_p1;
wire  signed [6:0] sext_ln24_17_fu_810_p1;
wire   [6:0] tmp18_fu_838_p2;
wire  signed [7:0] tmp18_cast_fu_844_p1;
wire  signed [7:0] tmp17_cast_fu_825_p1;
wire   [7:0] tmp16_fu_848_p2;
wire  signed [8:0] tmp16_cast_fu_854_p1;
wire  signed [8:0] tmp12_cast_fu_822_p1;
wire  signed [8:0] tmp11_fu_858_p2;
wire   [7:0] grp_fu_877_p2;
reg   [19:0] ap_return_preg;
reg   [94:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
reg    ap_ST_fsm_state8_blk;
reg    ap_ST_fsm_state9_blk;
reg    ap_ST_fsm_state10_blk;
reg    ap_ST_fsm_state11_blk;
reg    ap_ST_fsm_state12_blk;
reg    ap_ST_fsm_state13_blk;
reg    ap_ST_fsm_state14_blk;
reg    ap_ST_fsm_state15_blk;
reg    ap_ST_fsm_state16_blk;
reg    ap_ST_fsm_state17_blk;
reg    ap_ST_fsm_state18_blk;
reg    ap_ST_fsm_state19_blk;
reg    ap_ST_fsm_state20_blk;
reg    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
wire    ap_ST_fsm_state65_blk;
wire    ap_ST_fsm_state66_blk;
wire    ap_ST_fsm_state67_blk;
wire    ap_ST_fsm_state68_blk;
wire    ap_ST_fsm_state69_blk;
wire    ap_ST_fsm_state70_blk;
wire    ap_ST_fsm_state71_blk;
reg    ap_ST_fsm_state72_blk;
reg    ap_ST_fsm_state73_blk;
reg    ap_ST_fsm_state74_blk;
reg    ap_ST_fsm_state75_blk;
reg    ap_ST_fsm_state76_blk;
reg    ap_ST_fsm_state77_blk;
reg    ap_ST_fsm_state78_blk;
reg    ap_ST_fsm_state79_blk;
reg    ap_ST_fsm_state80_blk;
reg    ap_ST_fsm_state81_blk;
reg    ap_ST_fsm_state82_blk;
reg    ap_ST_fsm_state83_blk;
reg    ap_ST_fsm_state84_blk;
reg    ap_ST_fsm_state85_blk;
reg    ap_ST_fsm_state86_blk;
reg    ap_ST_fsm_state87_blk;
reg    ap_ST_fsm_state88_blk;
reg    ap_ST_fsm_state89_blk;
reg    ap_ST_fsm_state90_blk;
reg    ap_ST_fsm_state91_blk;
wire    ap_ST_fsm_state92_blk;
wire    ap_ST_fsm_state93_blk;
wire    ap_ST_fsm_state94_blk;
wire    ap_ST_fsm_state95_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_rst_reg_2 = 1'b1;
#0 ap_rst_reg_1 = 1'b1;
#0 ap_rst_n_inv = 1'b1;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 95'd1;
#0 acc_V = 20'd0;
#0 ap_return_preg = 20'd0;
end

loop_pipeline_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_continue(ap_continue),
    .ap_idle(ap_idle),
    .ap_return(ap_return),
    .A(A)
);

loop_pipeline_gmem_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 69 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ),
    .USER_RFIFONUM_WIDTH( 11 ),
    .USER_DW( 8 ),
    .USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARLEN(32'd1),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RFIFONUM(gmem_RFIFONUM),
    .I_AWVALID(1'b0),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWLEN(32'd0),
    .I_WVALID(1'b0),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(8'd0),
    .I_WSTRB(1'd0),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(1'b0)
);

loop_pipeline_ama_addmuladd_9s_9s_8ns_20s_20_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 20 ),
    .dout_WIDTH( 20 ))
ama_addmuladd_9s_9s_8ns_20s_20_4_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp11_fu_858_p2),
    .din1(tmp_reg_1102),
    .din2(grp_fu_877_p2),
    .din3(acc_V),
    .ce(1'b1),
    .dout(grp_fu_877_p4)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state95)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_return_preg <= 20'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state95)) begin
            ap_return_preg <= grp_fu_877_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    ap_rst_n_inv <= ap_rst_reg_1;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_1 <= ap_rst_reg_2;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_2 <= ~ap_rst_n;
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        A_read_reg_888 <= A;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state95)) begin
        acc_V <= grp_fu_877_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        empty_14_reg_1037 <= empty_14_fu_559_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        empty_16_reg_1042 <= empty_16_fu_563_p1;
        tmp4_reg_1047 <= tmp4_fu_573_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        empty_18_reg_1052 <= empty_18_fu_579_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        empty_20_reg_1057 <= empty_20_fu_583_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        empty_22_reg_1062 <= empty_22_fu_587_p1;
        tmp1_reg_1067 <= tmp1_fu_623_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        empty_24_reg_1072 <= empty_24_fu_629_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        empty_26_reg_1077 <= empty_26_fu_633_p1;
        tmp8_reg_1082 <= tmp8_fu_643_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        empty_28_reg_1087 <= empty_28_fu_649_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        empty_30_reg_1092 <= empty_30_fu_653_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        empty_32_reg_1097 <= empty_32_fu_657_p1;
        tmp_reg_1102 <= tmp_fu_706_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        empty_34_reg_1107 <= empty_34_fu_712_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state84)) begin
        empty_36_reg_1112 <= empty_36_fu_716_p1;
        tmp13_reg_1117 <= tmp13_fu_726_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        empty_38_reg_1122 <= empty_38_fu_732_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        empty_40_reg_1127 <= empty_40_fu_736_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        empty_42_reg_1132 <= empty_42_fu_740_p1;
        tmp12_reg_1137 <= tmp12_fu_776_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        empty_44_reg_1142 <= empty_44_fu_782_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state89)) begin
        empty_46_reg_1147 <= empty_46_fu_786_p1;
        tmp17_reg_1152 <= tmp17_fu_796_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state90)) begin
        empty_48_reg_1157 <= empty_48_fu_802_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        empty_50_reg_1162 <= empty_50_fu_806_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        empty_reg_1032 <= empty_fu_555_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        gmem_addr_10_reg_972 <= empty_31_fu_445_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        gmem_addr_11_reg_978 <= empty_33_fu_456_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        gmem_addr_12_reg_984 <= empty_35_fu_467_p2;
        gmem_addr_13_reg_990 <= empty_37_fu_478_p2;
        gmem_addr_14_reg_996 <= empty_39_fu_489_p2;
        gmem_addr_15_reg_1002 <= empty_41_fu_500_p2;
        gmem_addr_16_reg_1008 <= empty_43_fu_511_p2;
        gmem_addr_17_reg_1014 <= empty_45_fu_522_p2;
        gmem_addr_18_reg_1020 <= empty_47_fu_533_p2;
        gmem_addr_19_reg_1026 <= empty_49_fu_544_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        gmem_addr_1_reg_918 <= empty_13_fu_346_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        gmem_addr_2_reg_924 <= empty_15_fu_357_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        gmem_addr_3_reg_930 <= empty_17_fu_368_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        gmem_addr_4_reg_936 <= empty_19_fu_379_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        gmem_addr_5_reg_942 <= empty_21_fu_390_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        gmem_addr_6_reg_948 <= empty_23_fu_401_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        gmem_addr_7_reg_954 <= empty_25_fu_412_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        gmem_addr_8_reg_960 <= empty_27_fu_423_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        gmem_addr_9_reg_966 <= empty_29_fu_434_p2;
    end
end

always @ (*) begin
    if ((gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state10_blk = 1'b1;
    end else begin
        ap_ST_fsm_state10_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state11_blk = 1'b1;
    end else begin
        ap_ST_fsm_state11_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state12_blk = 1'b1;
    end else begin
        ap_ST_fsm_state12_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state13_blk = 1'b1;
    end else begin
        ap_ST_fsm_state13_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state14_blk = 1'b1;
    end else begin
        ap_ST_fsm_state14_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state15_blk = 1'b1;
    end else begin
        ap_ST_fsm_state15_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state16_blk = 1'b1;
    end else begin
        ap_ST_fsm_state16_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state17_blk = 1'b1;
    end else begin
        ap_ST_fsm_state17_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state18_blk = 1'b1;
    end else begin
        ap_ST_fsm_state18_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state19_blk = 1'b1;
    end else begin
        ap_ST_fsm_state19_blk = 1'b0;
    end
end

always @ (*) begin
    if (((ap_done_reg == 1'b1) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state20_blk = 1'b1;
    end else begin
        ap_ST_fsm_state20_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state21_blk = 1'b1;
    end else begin
        ap_ST_fsm_state21_blk = 1'b0;
    end
end

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

always @ (*) begin
    if ((gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

always @ (*) begin
    if ((gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

always @ (*) begin
    if ((gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

always @ (*) begin
    if ((gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

assign ap_ST_fsm_state64_blk = 1'b0;

assign ap_ST_fsm_state65_blk = 1'b0;

assign ap_ST_fsm_state66_blk = 1'b0;

assign ap_ST_fsm_state67_blk = 1'b0;

assign ap_ST_fsm_state68_blk = 1'b0;

assign ap_ST_fsm_state69_blk = 1'b0;

always @ (*) begin
    if ((gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

assign ap_ST_fsm_state70_blk = 1'b0;

assign ap_ST_fsm_state71_blk = 1'b0;

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state72_blk = 1'b1;
    end else begin
        ap_ST_fsm_state72_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state73_blk = 1'b1;
    end else begin
        ap_ST_fsm_state73_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state74_blk = 1'b1;
    end else begin
        ap_ST_fsm_state74_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state75_blk = 1'b1;
    end else begin
        ap_ST_fsm_state75_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state76_blk = 1'b1;
    end else begin
        ap_ST_fsm_state76_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state77_blk = 1'b1;
    end else begin
        ap_ST_fsm_state77_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state78_blk = 1'b1;
    end else begin
        ap_ST_fsm_state78_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state79_blk = 1'b1;
    end else begin
        ap_ST_fsm_state79_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state80_blk = 1'b1;
    end else begin
        ap_ST_fsm_state80_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state81_blk = 1'b1;
    end else begin
        ap_ST_fsm_state81_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state82_blk = 1'b1;
    end else begin
        ap_ST_fsm_state82_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state83_blk = 1'b1;
    end else begin
        ap_ST_fsm_state83_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state84_blk = 1'b1;
    end else begin
        ap_ST_fsm_state84_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state85_blk = 1'b1;
    end else begin
        ap_ST_fsm_state85_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state86_blk = 1'b1;
    end else begin
        ap_ST_fsm_state86_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state87_blk = 1'b1;
    end else begin
        ap_ST_fsm_state87_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state88_blk = 1'b1;
    end else begin
        ap_ST_fsm_state88_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state89_blk = 1'b1;
    end else begin
        ap_ST_fsm_state89_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state8_blk = 1'b1;
    end else begin
        ap_ST_fsm_state8_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state90_blk = 1'b1;
    end else begin
        ap_ST_fsm_state90_blk = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state91_blk = 1'b1;
    end else begin
        ap_ST_fsm_state91_blk = 1'b0;
    end
end

assign ap_ST_fsm_state92_blk = 1'b0;

assign ap_ST_fsm_state93_blk = 1'b0;

assign ap_ST_fsm_state94_blk = 1'b0;

assign ap_ST_fsm_state95_blk = 1'b0;

always @ (*) begin
    if ((gmem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state9_blk = 1'b1;
    end else begin
        ap_ST_fsm_state9_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state95)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state95)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state95)) begin
        ap_return = grp_fu_877_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((gmem_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state21)) begin
            gmem_ARADDR = gmem_addr_19_reg_1026;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            gmem_ARADDR = gmem_addr_18_reg_1020;
        end else if ((1'b1 == ap_CS_fsm_state19)) begin
            gmem_ARADDR = gmem_addr_17_reg_1014;
        end else if ((1'b1 == ap_CS_fsm_state18)) begin
            gmem_ARADDR = gmem_addr_16_reg_1008;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            gmem_ARADDR = gmem_addr_15_reg_1002;
        end else if ((1'b1 == ap_CS_fsm_state16)) begin
            gmem_ARADDR = gmem_addr_14_reg_996;
        end else if ((1'b1 == ap_CS_fsm_state15)) begin
            gmem_ARADDR = gmem_addr_13_reg_990;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            gmem_ARADDR = gmem_addr_12_reg_984;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            gmem_ARADDR = gmem_addr_11_reg_978;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            gmem_ARADDR = gmem_addr_10_reg_972;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            gmem_ARADDR = gmem_addr_9_reg_966;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            gmem_ARADDR = gmem_addr_8_reg_960;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            gmem_ARADDR = gmem_addr_7_reg_954;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            gmem_ARADDR = gmem_addr_6_reg_948;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            gmem_ARADDR = gmem_addr_5_reg_942;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            gmem_ARADDR = gmem_addr_4_reg_936;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            gmem_ARADDR = gmem_addr_3_reg_930;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            gmem_ARADDR = gmem_addr_2_reg_924;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            gmem_ARADDR = gmem_addr_1_reg_918;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            gmem_ARADDR = A_read_reg_888;
        end else begin
            gmem_ARADDR = 'bx;
        end
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state20)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state19)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state18)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state91)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state90)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state89)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state88)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state87)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state86)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state85)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state84)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state83)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state82)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state81)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state80)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state79)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state78)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state77)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state76)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state75)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state74)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state73)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state72)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state72))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state72))) begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end
        end
        ap_ST_fsm_state73 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state73))) begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end
        end
        ap_ST_fsm_state74 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state74))) begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end
        end
        ap_ST_fsm_state75 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state75))) begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end
        end
        ap_ST_fsm_state76 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state76))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end
        end
        ap_ST_fsm_state77 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state77))) begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end
        end
        ap_ST_fsm_state78 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state78))) begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end
        end
        ap_ST_fsm_state79 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state79))) begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end
        end
        ap_ST_fsm_state80 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state80))) begin
                ap_NS_fsm = ap_ST_fsm_state81;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end
        end
        ap_ST_fsm_state81 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state81))) begin
                ap_NS_fsm = ap_ST_fsm_state82;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state81;
            end
        end
        ap_ST_fsm_state82 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state82))) begin
                ap_NS_fsm = ap_ST_fsm_state83;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state82;
            end
        end
        ap_ST_fsm_state83 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state83))) begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state83;
            end
        end
        ap_ST_fsm_state84 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state84))) begin
                ap_NS_fsm = ap_ST_fsm_state85;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end
        end
        ap_ST_fsm_state85 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state85))) begin
                ap_NS_fsm = ap_ST_fsm_state86;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state85;
            end
        end
        ap_ST_fsm_state86 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state86))) begin
                ap_NS_fsm = ap_ST_fsm_state87;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state86;
            end
        end
        ap_ST_fsm_state87 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state87))) begin
                ap_NS_fsm = ap_ST_fsm_state88;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state87;
            end
        end
        ap_ST_fsm_state88 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state88))) begin
                ap_NS_fsm = ap_ST_fsm_state89;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state88;
            end
        end
        ap_ST_fsm_state89 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state89))) begin
                ap_NS_fsm = ap_ST_fsm_state90;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state89;
            end
        end
        ap_ST_fsm_state90 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state90))) begin
                ap_NS_fsm = ap_ST_fsm_state91;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state90;
            end
        end
        ap_ST_fsm_state91 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state91))) begin
                ap_NS_fsm = ap_ST_fsm_state92;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state91;
            end
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd94];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign empty_13_fu_346_p2 = (A_read_reg_888 + 64'd1);

assign empty_14_fu_559_p1 = gmem_RDATA[4:0];

assign empty_15_fu_357_p2 = (A_read_reg_888 + 64'd2);

assign empty_16_fu_563_p1 = gmem_RDATA[4:0];

assign empty_17_fu_368_p2 = (A_read_reg_888 + 64'd3);

assign empty_18_fu_579_p1 = gmem_RDATA[4:0];

assign empty_19_fu_379_p2 = (A_read_reg_888 + 64'd4);

assign empty_20_fu_583_p1 = gmem_RDATA[4:0];

assign empty_21_fu_390_p2 = (A_read_reg_888 + 64'd5);

assign empty_22_fu_587_p1 = gmem_RDATA[4:0];

assign empty_23_fu_401_p2 = (A_read_reg_888 + 64'd6);

assign empty_24_fu_629_p1 = gmem_RDATA[4:0];

assign empty_25_fu_412_p2 = (A_read_reg_888 + 64'd7);

assign empty_26_fu_633_p1 = gmem_RDATA[4:0];

assign empty_27_fu_423_p2 = (A_read_reg_888 + 64'd8);

assign empty_28_fu_649_p1 = gmem_RDATA[4:0];

assign empty_29_fu_434_p2 = (A_read_reg_888 + 64'd9);

assign empty_30_fu_653_p1 = gmem_RDATA[4:0];

assign empty_31_fu_445_p2 = (A_read_reg_888 + 64'd10);

assign empty_32_fu_657_p1 = gmem_RDATA[4:0];

assign empty_33_fu_456_p2 = (A_read_reg_888 + 64'd11);

assign empty_34_fu_712_p1 = gmem_RDATA[4:0];

assign empty_35_fu_467_p2 = (A_read_reg_888 + 64'd12);

assign empty_36_fu_716_p1 = gmem_RDATA[4:0];

assign empty_37_fu_478_p2 = (A_read_reg_888 + 64'd13);

assign empty_38_fu_732_p1 = gmem_RDATA[4:0];

assign empty_39_fu_489_p2 = (A_read_reg_888 + 64'd14);

assign empty_40_fu_736_p1 = gmem_RDATA[4:0];

assign empty_41_fu_500_p2 = (A_read_reg_888 + 64'd15);

assign empty_42_fu_740_p1 = gmem_RDATA[4:0];

assign empty_43_fu_511_p2 = (A_read_reg_888 + 64'd16);

assign empty_44_fu_782_p1 = gmem_RDATA[4:0];

assign empty_45_fu_522_p2 = (A_read_reg_888 + 64'd17);

assign empty_46_fu_786_p1 = gmem_RDATA[4:0];

assign empty_47_fu_533_p2 = (A_read_reg_888 + 64'd18);

assign empty_48_fu_802_p1 = gmem_RDATA[4:0];

assign empty_49_fu_544_p2 = (A_read_reg_888 + 64'd19);

assign empty_50_fu_806_p1 = gmem_RDATA[4:0];

assign empty_fu_555_p1 = gmem_RDATA[4:0];

assign gmem_load_19_cast_cast_fu_816_p1 = $signed(empty_50_reg_1162);

assign grp_fu_877_p2 = 19'd190;

assign sext_ln24_10_fu_720_p1 = $signed(empty_32_reg_1097);

assign sext_ln24_11_fu_723_p1 = $signed(empty_34_reg_1107);

assign sext_ln24_12_fu_744_p1 = $signed(empty_36_reg_1112);

assign sext_ln24_13_fu_747_p1 = $signed(empty_38_reg_1122);

assign sext_ln24_14_fu_750_p1 = $signed(empty_40_reg_1127);

assign sext_ln24_15_fu_790_p1 = $signed(empty_42_reg_1132);

assign sext_ln24_16_fu_793_p1 = $signed(empty_44_reg_1142);

assign sext_ln24_17_fu_810_p1 = $signed(empty_46_reg_1147);

assign sext_ln24_18_fu_813_p1 = $signed(empty_48_reg_1157);

assign sext_ln24_1_fu_570_p1 = $signed(empty_14_reg_1037);

assign sext_ln24_2_fu_591_p1 = $signed(empty_16_reg_1042);

assign sext_ln24_3_fu_594_p1 = $signed(empty_18_reg_1052);

assign sext_ln24_4_fu_597_p1 = $signed(empty_20_reg_1057);

assign sext_ln24_5_fu_637_p1 = $signed(empty_22_reg_1062);

assign sext_ln24_6_fu_640_p1 = $signed(empty_24_reg_1072);

assign sext_ln24_7_fu_661_p1 = $signed(empty_26_reg_1077);

assign sext_ln24_8_fu_664_p1 = $signed(empty_28_reg_1087);

assign sext_ln24_9_fu_667_p1 = $signed(empty_30_reg_1092);

assign sext_ln24_fu_567_p1 = $signed(empty_reg_1032);

assign tmp10_cast_fu_682_p1 = $signed(tmp10_fu_676_p2);

assign tmp10_fu_676_p2 = ($signed(sext_ln24_8_fu_664_p1) + $signed(sext_ln24_9_fu_667_p1));

assign tmp11_fu_858_p2 = ($signed(tmp16_cast_fu_854_p1) + $signed(tmp12_cast_fu_822_p1));

assign tmp12_cast_fu_822_p1 = $signed(tmp12_reg_1137);

assign tmp12_fu_776_p2 = ($signed(tmp14_cast_fu_772_p1) + $signed(tmp13_cast_fu_753_p1));

assign tmp13_cast_fu_753_p1 = $signed(tmp13_reg_1117);

assign tmp13_fu_726_p2 = ($signed(sext_ln24_10_fu_720_p1) + $signed(sext_ln24_11_fu_723_p1));

assign tmp14_cast_fu_772_p1 = $signed(tmp14_fu_766_p2);

assign tmp14_fu_766_p2 = ($signed(tmp15_cast_fu_762_p1) + $signed(sext_ln24_12_fu_744_p1));

assign tmp15_cast_fu_762_p1 = $signed(tmp15_fu_756_p2);

assign tmp15_fu_756_p2 = ($signed(sext_ln24_13_fu_747_p1) + $signed(sext_ln24_14_fu_750_p1));

assign tmp16_cast_fu_854_p1 = $signed(tmp16_fu_848_p2);

assign tmp16_fu_848_p2 = ($signed(tmp18_cast_fu_844_p1) + $signed(tmp17_cast_fu_825_p1));

assign tmp17_cast_fu_825_p1 = $signed(tmp17_reg_1152);

assign tmp17_fu_796_p2 = ($signed(sext_ln24_15_fu_790_p1) + $signed(sext_ln24_16_fu_793_p1));

assign tmp18_cast_fu_844_p1 = $signed(tmp18_fu_838_p2);

assign tmp18_fu_838_p2 = ($signed(tmp19_cast_fu_834_p1) + $signed(sext_ln24_17_fu_810_p1));

assign tmp19_cast_fu_834_p1 = $signed(tmp19_fu_828_p2);

assign tmp19_fu_828_p2 = ($signed(sext_ln24_18_fu_813_p1) + $signed(gmem_load_19_cast_cast_fu_816_p1));

assign tmp1_cast_fu_670_p1 = $signed(tmp1_reg_1067);

assign tmp1_fu_623_p2 = ($signed(tmp5_cast_fu_619_p1) + $signed(tmp4_cast_fu_600_p1));

assign tmp4_cast_fu_600_p1 = $signed(tmp4_reg_1047);

assign tmp4_fu_573_p2 = ($signed(sext_ln24_1_fu_570_p1) + $signed(sext_ln24_fu_567_p1));

assign tmp5_cast_fu_619_p1 = $signed(tmp5_fu_613_p2);

assign tmp5_fu_613_p2 = ($signed(tmp6_cast_fu_609_p1) + $signed(sext_ln24_2_fu_591_p1));

assign tmp6_cast_fu_609_p1 = $signed(tmp6_fu_603_p2);

assign tmp6_fu_603_p2 = ($signed(sext_ln24_3_fu_594_p1) + $signed(sext_ln24_4_fu_597_p1));

assign tmp7_cast_fu_702_p1 = $signed(tmp7_fu_696_p2);

assign tmp7_fu_696_p2 = ($signed(tmp9_cast_fu_692_p1) + $signed(tmp8_cast_fu_673_p1));

assign tmp8_cast_fu_673_p1 = $signed(tmp8_reg_1082);

assign tmp8_fu_643_p2 = ($signed(sext_ln24_5_fu_637_p1) + $signed(sext_ln24_6_fu_640_p1));

assign tmp9_cast_fu_692_p1 = $signed(tmp9_fu_686_p2);

assign tmp9_fu_686_p2 = ($signed(tmp10_cast_fu_682_p1) + $signed(sext_ln24_7_fu_661_p1));

assign tmp_fu_706_p2 = ($signed(tmp7_cast_fu_702_p1) + $signed(tmp1_cast_fu_670_p1));

endmodule //loop_pipeline
